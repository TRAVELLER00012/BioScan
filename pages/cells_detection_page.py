import streamlit as st
from models.blood_cells_model import run_detection, check_ratio
import pandas as pd


st.title("Blood Cells Detection")

st.subheader("Automated Blood Cell Analysis")

col1, col2 = st.columns([2, 3])

with col1:
    st.image("./assets/cells.jpg", width=500)
with col2:
    st.markdown("""
                <p style='font-size:1.125rem'>This module performs automated detection and analysis of Red Blood Cells (RBCs) and White Blood Cells (WBCs) from microscopic blood smear images using a deep learning–based object detection model (YOLO). By learning the structural and color-based patterns of different cell types, the model can efficiently identify and classify them with high precision. This automation eliminates the need for tedious manual counting, allowing for faster and more reliable blood cell assessment. It not only enhances diagnostic consistency but also enables large-scale screening, making it a valuable tool for early detection of blood-related disorders and for improving overall laboratory workflow efficiency.</p>
            """, unsafe_allow_html=True)

with st.expander("How to use this module?", expanded=True):
    st.markdown("""
        ### 🧭 How to Use

        1. **Upload Image:**
        Upload a microscopic blood smear image in `.jpg`, `.jpeg`, or `.png` format.

        2. **Run Detection:**
        Click on **‘Detect Cells’** to start the YOLO-based detection model.
        The system will automatically identify and classify Red Blood Cells (RBCs) and White Blood Cells (WBCs).

        3. **View Results:**
        Once the detection is complete, the processed image will display bounding boxes highlighting each detected cell.
        You’ll also see a summary of counts for RBCs and WBCs below the image.

        4. **Analyze Data:**
        Review detection confidence levels, cell density, and other analytical insights generated by the model.

        5. **Download Report (Optional):**
        Export the detection results and cell counts as a `.csv` or `.txt` file for further documentation or lab records.
    """)

with st.expander("Working of our model"):
    st.markdown("""
        ### ⚙️ How the YOLO Model Works

        The YOLO (You Only Look Once) model is a deep learning–based object detection algorithm designed for **real-time image analysis**.
        Instead of scanning an image multiple times, YOLO processes the **entire image in a single pass**, making it extremely fast and efficient.

        1. **Image Division:**
        The input image is divided into a grid of smaller cells. Each cell is responsible for predicting objects that fall within its region.

        2. **Bounding Box Prediction:**
        For every grid cell, the model predicts several **bounding boxes**, along with a **confidence score** that indicates how likely it is that an object exists inside the box.

        3. **Class Prediction:**
        Each bounding box is assigned a **class label** (in this case, RBC or WBC) along with the probability of belonging to that class.

        4. **Non-Maximum Suppression (NMS):**
        YOLO applies NMS to remove overlapping boxes and retain only the most accurate predictions.

        5. **Final Output:**
        The detected cells are displayed with colored bounding boxes and labels, making it easy to identify and count RBCs and WBCs precisely.

        This efficient single-stage approach allows YOLO to perform **real-time detection with high accuracy**, making it ideal for medical imaging tasks like automated blood cell analysis.
    """)

with st.expander("What to Expect", expanded=False):
    st.markdown(r"""
    ### 📊 Understanding the Results
    - The model provides **counts of Red Blood Cells (RBCs) and White Blood Cells (WBCs)** in each uploaded image.  
    - **$\frac{RBCs}{WBCs}$ ratio** is calculated to help indicate whether the blood sample is within a normal range.  
    - Results include **visual highlights of detected cells**, so you can easily verify the predictions.  
    - Uploading **multiple images** provides a more accurate overview of the blood sample.  
    - This tool is **educational and diagnostic-supportive**; results should be interpreted by a professional for medical decisions.  
    - Expect some **variability in detection** depending on image quality, staining, and lighting.
    """)

uploaded_files = st.file_uploader(
    "Choose a file", type=["jpg", "png", "jpeg"], accept_multiple_files=True)

net_rbc_count = 0
net_wbc_count = 0
health_status = ""
ratio = 0.0


def get_results():
    global net_rbc_count
    global uploaded_files
    global net_wbc_count
    global health_status
    global ratio

    net_rbc_count = 0
    net_wbc_count = 0

    for file in uploaded_files:
        results, rbc_count, wbc_count, ratio = run_detection(file)
        net_rbc_count += rbc_count
        net_wbc_count += wbc_count

    ratio = net_rbc_count / \
        net_wbc_count if net_wbc_count != 0 else float('inf')

    health_status = check_ratio(ratio=ratio)


if len(uploaded_files) > 0:
    st.image(uploaded_files, width=300, caption=[
             file.name for file in uploaded_files])
    st.success("Files uploaded successfully!")
    get_results()
else:
    st.info("Please upload at least one image file.")


st.subheader("Detection Results", divider="blue")


if net_rbc_count > 0:
    st.bar_chart(pd.DataFrame([net_rbc_count, net_wbc_count], columns=[
                 'Count'], index=['RBC', 'WBC']))
    st.markdown(r"$\frac{RBCs}{WBCs} = " + f"{ratio:.2f}$")

    if health_status == "RBC/WBC ratio is within normal range. Sample shows a healthy distribution of blood cells.":
        st.success(health_status)
    elif health_status == "Detected relatively fewer RBCs compared to WBCs. Possible anemia or low RBC count.":
        st.warning(health_status)
    elif health_status == "Detected relatively high RBCs compared to WBCs. Sample seems within safe range, but verify with more images.":
        st.info(health_status)
    elif health_status == "No White Blood Cells (WBCs) detected. Unable to compute RBC:WBC ratio.":
        st.error(health_status)


else:
    st.warning("Please upload valid images with detectable blood cells.")
st.html(
    '''
    <style>
    hr {
        border-color: dodgerblue;
    }
    </style>
    <hr>
    '''
)


col1, col2, col3 = st.columns([2, 10, 1.05])
with col1:
    if st.button("Previous Page"):
        st.switch_page("./pages/homepage.py")
with col3:
    if st.button("Next Page"):
        st.switch_page("./pages/malarial_detection_page.py")
